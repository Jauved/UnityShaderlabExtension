{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Shaderlab",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#tags"
        },
        {
            "include": "#variable"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#hlsl-embedded"
        },
        {
            "include": "#pragma"
        },
        {
            "include": "#property"
        },
        {
            "include": "#macro"
        },
        {
            "include": "#cbuffer-pair"
        },
        {
            "name": "support.type.attributename.shaderlab",
            "begin": "(^\\s*\\[)",
            "end": "(\\])",
            "patterns": [
                {
                    "name": "support.type.attributename.shaderlab",
                    "match": "\\G([a-zA-Z]+)\\b"
                }
            ]
        }
    ],
    "repository": {
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.shaderlab",
                    "match": "\\b([1-9]e|[0-9]+\\.?[0-9]*)\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-dash.shaderlab",
                    "begin": "//",
                    "end": "$"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.other.shaderlab",
                    "match": "\\b(if|while|for|return|CGPROGRAM|CGINCLUDE|ENDCG|in|out|inout)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.basic.shaderlab",
                    "match": "\\b(Range|Float|Int|Color|Vector|2D|3D|Cube|Any)\\b"
                },
                {
                    "name": "storage.type.structure.shaderlab",
                    "match": "\\b(Shader|Properties|SubShader|Pass|Category)\\b"
                },
                {
                    "name": "support.type.propertyname.shaderlab",
                    "match": "\\b(Name|Tags|Fallback|CustomEditor|Cull|ZWrite|ZTest|Offset|Blend|BlendOp|ColorMask|AlphaToMask|LOD|Lighting|Stencil|Ref|ReadMask|WriteMask|Comp|CompBack|CompFront|Fail|ZFail|UsePass|GrabPass|Dependency|Material|Diffuse|Ambient|Shininess|Specular|Emission|Fog|Mode|Density|SeparateSpecular|SetTexture|Combine|ConstantColor|Matrix|AlphaTest|ColorMaterial|BindChannels|Bind|FallBack)\\b"
                }
            ]
        },
        "tags": {
            "patterns": [
                {
                    "include": "#builtin-tags"
                },
                {
                    "include": "#builtin-tag-values"
                }
            ]
        },
        "strings": {
            "name": "string.shaderlab",
            "match": "(?<!\"\\s*=\\s*)\"[^\"=]*\"(?!\\s*=\\s*\")"
        },
        "builtin-tags": {
            "name": "support.type.propertyname.shaderlab",
            "match": "\"\\b(Queue|RenderType|DisableBatching|ForceNoShadowCasting|IgnoreProjector|CanUseSpriteAtlas|PreviewType|LightMode|PassFlags|PerformanceChecks)\\b\""
        },
        "builtin-tag-values": {
            "patterns": [
                {
                    "name": "support.type.property-name.shaderlab",
                    "match": "\"\\b(True|False|LODFading)\\b\""
                },
                {
                    "include": "#builtin-tag-subshader-value-RenderType"
                },
                {
                    "include": "#builtin-tag-subshader-value-Queue"
                },
                {
                    "include": "#builtin-tag-pass-value-LightMode"
                },
                {
                    "include": "#builtin-tag-pass-value-Other"
                },
                {
                    "include": "#builtin-tag-subshader-value-PreviewType"
                }
            ]
        },
        "builtin-tag-subshader-value-Queue": {
            "name": "support.type.property-name.shaderlab",
            "match": "\"\\b(Background|Geometry|AlphaTest|Transparent|Overlay)\\b(\\+|\\-)*[0-9]*\""
        },
        "builtin-tag-subshader-value-RenderType": {
            "name": "support.type.property-name.shaderlab",
            "match": "\"\\b(Opaque|Transparent|TransparentCutout|Background|Overlay|TreeOpaque|TreeTransparentCutout|TreeBillboard|Grass|GrassBillboard)\\b\""
        },
        "builtin-tag-subshader-value-PreviewType": {
            "name": "support.type.property-name.shaderlab",
            "match": "\"\\b(Sphere|Plane|Skybox)\\b\""
        },
        "builtin-tag-pass-value-LightMode": {
            "name": "support.type.property-name.shaderlab",
            "match": "\"\\b(Always|ForwardBase|ForwardAdd|Deferred|ShadowCaster|MotionVectors|PrepassBase|PrepassFinal|Vertex|VertexLMRGBM|VertexLM|Meta)\\b\""
        },
        "builtin-tag-pass-value-Other": {
            "name": "support.type.property-name.shaderlab",
            "match": "\"\\b(OnlyDirectional|SoftVegetation)\\b\""
        },
        "property": {
            "patterns": [
                {
                    "include": "#cull-value"
                },
                {
                    "include": "#zwrite-value"
                },
                {
                    "include": "#lighting-value"
                },
                {
                    "include": "#ztest-value"
                },
                {
                    "include": "#colormask-value"
                },
                {
                    "include": "#blend-value"
                },
                {
                    "include": "#blendop-value"
                }
            ]
        },
        "cull-value": {
            "name": "support.type.property-name.shaderlab",
            "match": "(?<=Cull\\s*)\\b(Front|Back|Off)\\b"
        },
        "zwrite-value": {
            "name": "support.type.property-name.shaderlab",
            "match": "(?<=ZWrite\\s*)\\b(On|Off)\\b"
        },
        "lighting-value": {
            "name": "support.type.property-name.shaderlab",
            "match": "(?<=Lighting\\s*)\\b(On|Off)\\b"
        },
        "ztest-value": {
            "name": "support.type.property-name.shaderlab",
            "match": "(?<=ZTest\\s*)\\b(Less|Greater|LEqual|GEqual|Equal|NotEqual|Always)\\b"
        },
        "colormask-value": {
            "name": "support.type.property-name.shaderlab",
            "match": "(?<=ColorMask\\s*)\\b([RGBA][GBA]?[BA]?[A]?)\\b"
        },
        "blend-value": {
            "name": "support.type.property-name.shaderlab",
            "match": "(?<=Blend\\s*[0-7]?\\s*)((\\b(One|Zero|ScrColor|SrcAlpha|DstColor|DstAlpha|OneMinusSrcColor|OneMinusSrcAlpha|OneMinusDstColor|OneMinusDstAlpha)\\b\\s*\\b(One|Zero|ScrColor|SrcAlpha|DstColor|DstAlpha|OneMinusSrcColor|OneMinusSrcAlpha|OneMinusDstColor|OneMinusDstAlpha)\\b((,\\s*)?\\b(One|Zero|ScrColor|SrcAlpha|DstColor|DstAlpha|OneMinusSrcColor|OneMinusSrcAlpha|OneMinusDstColor|OneMinusDstAlpha)\\b\\s*\\b(One|Zero|ScrColor|SrcAlpha|DstColor|DstAlpha|OneMinusSrcColor|OneMinusSrcAlpha|OneMinusDstColor|OneMinusDstAlpha)\\b)?)|Off)"
        },
        "blendop-value": {
            "name": "support.type.property-name.shaderlab",
            "match": "(?<=BlendOp\\s*[0-7]?\\s*)\\b(Add|Sub|RevSub|Min|Max)\\b,?(\\b(Add|Sub|RevSub|Min|Max)\\b)?"
        },
        "variable": {
            "patterns": [
                {
                    "name": "support.variable.declaration.shaderlab",
                    "match": "\\b([_][a-zA-Z0-9_]*)"
                },
                {
                    "name": "support.variable.reference.shaderlab",
                    "match": "\\[([a-zA-Z_][a-zA-Z0-9_]*)\\](?!\\s*[a-zA-Z_][a-zA-Z0-9_]*\\s*\\(\")"
                }
            ]
        },
        "pragma": {
            "patterns": [
                {
                    "include": "#pragma-propertyname"
                },
                {
                    "include": "#pragma-propertyvalue"
                }
            ]
        },
        "pragma-propertyname": {
            "name": "support.type.propertyname.shaderlab",
            "match": "(?<=#pragma\\s*)\\b(vertex|fragment|shader_feature|multi_compile_.*|target|exclude_renderers|skip_variants)\\b"
        },
        "pragma-propertyvalue": {
            "name": "support.type.property-name.shaderlab",
            "match": "(?<=#pragma\\s*(vertex|fragment|shader_feature|multi_compile_.*|target|exclude_renderers|skip_variants)\\s*).*"
        },
        "macro": {
            "patterns": [
                {
                    "include": "#macro-name"
                },
                {
                    "include": "#macro-source"
                },
                {
                    "include": "#macro-define"
                }
            ]
        },
        "macro-name": {
            "name": "support.function.shaderlab",
            "match": "(?<=(#define|#if(n?)def|#undef|#if|if)\\s*)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        "macro-source": {
            "name": "support.variable.reference.shaderlab",
            "match": "(?<=(#define|#if(n)def|#undef|#if|if)\\s*\\b[a-zA-Z_][a-zA-Z0-9_]*\\b\\s*)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        "macro-define": {
            "name": "support.variable.reference.shaderlab",
            "match": "(?<=defined\\s*[(])\\b([a-zA-Z0-9_]*)\\b(?=[)])"
        },
        "cbuffer-pair": {
            "name": "support.function.shaderlab",
            "match": "(GLOBAL_)?CBUFFER_(START|END)"
        },
        "hlsl-embedded": {
            "patterns": [
                {
                    "include": "source.hlsl"
                },
                {
                    "name": "storage.type.basic.shaderlab",
                    "match": "\\b(fixed([1-4](x[1-4])?)?)\\b"
                },
                {
                    "name": "support.variable.transformations.shaderlab",
                    "match": "\\b(UNITY_MATRIX_MVP|UNITY_MATRIX_MV|UNITY_MATRIX_M|UNITY_MATRIX_V|UNITY_MATRIX_P|UNITY_MATRIX_VP|UNITY_MATRIX_T_MV|UNITY_MATRIX_I_V|UNITY_MATRIX_IT_MV|_Object2World|_World2Object|unity_ObjectToWorld|unity_WorldToObject|unity_WorldToLight|unity_WorldToShadow|unity_ShadowSplitSpheres|unity_ShadowSplitSqRadii|unity_LightShadowBias|unity_ShadowFadeCenterAndType|unity_WorldTransformParams|unity_RenderingLayer|unity_LightColor[0-3]|unity_SH[A-C][rgb]?|unity_WorldToCamera|unity_CameraToWorld|unity_HalfStereoSeparation|unity_OcclusionMaskSelector|unity_ProbesOcclusion|glstate_matrix_transpose_modelview0|glstate_lightmodel_ambient|unity_IndirectSpecColor|unity_ShadowColor|unity_LightmapST|unity_DynamicLightmapST|unity_SpecCube[0-1]_[a-zA-Z]*|unity_ProbeVolume[a-zA-Z]*|unity_MatrixMVP|unity_MatrixMV|unity_MatrixTMV|unity_MatrixITMV|unity_MatrixVP|unity_MatrixV|unity_MatrixInvV|glstate_matrix_projection)\\b"
                },
                {
                    "name": "support.variable.camera.shaderlab",
                    "match": "\\b(_WorldSpaceCameraPos|_ProjectionParams|_ScreenParams|_ZBufferParams|unity_OrthoParams|unity_CameraProjection|unity_CameraInvProjection|unity_CameraWorldClipPlanes)\\b"
                },
                {
                    "name": "support.variable.time.shaderlab",
                    "match": "\\b(_Time|_SinTime|_CosTime|unity_DeltaTime)\\b"
                },
                {
                    "name": "support.variable.lighting.shaderlab",
                    "match": "\\b(_LightColor0|_WorldSpaceLightPos0|_LightMatrix0|unity_4LightPosX0|unity_4LightPosY0|unity_4LightPosZ0|unity_4LightAtten0|unity_LightColor|_LightColor|unity_LightPosition|unity_LightAtten|unity_SpotDirection)\\b"
                },
                {
                    "name": "support.variable.fog.shaderlab",
                    "match": "\\b(unity_AmbientSky|unity_AmbientEquator|unity_AmbientGround|UNITY_LIGHTMODEL_AMBIENT|unity_FogColor|unity_FogParams)\\b"
                },
                {
                    "name": "support.variable.various.shaderlab",
                    "match": "\\b(unity_LODFade)\\b"
                },
                {
                    "name": "support.variable.preprocessor.targetplatform.shaderlab",
                    "match": "\\b(SHADER_API_D3D9|SHADER_API_D3D11|SHADER_API_GLCORE|SHADER_API_OPENGL|SHADER_API_GLES|SHADER_API_GLES3|SHADER_API_METAL|SHADER_API_D3D11_9X|SHADER_API_PSSL|SHADER_API_XBOXONE|SHADER_API_PSP2|SHADER_API_WIIU|SHADER_API_MOBILE|SHADER_API_GLSL)\\b"
                },
                {
                    "name": "support.variable.preprocessor.targetmodel.shaderlab",
                    "match": "\\b(SHADER_TARGET)\\b"
                },
                {
                    "name": "support.variable.preprocessor.unityversion.shaderlab",
                    "match": "\\b(UNITY_VERSION)\\b"
                },
                {
                    "name": "support.variable.preprocessor.platformdifference.shaderlab",
                    "match": "\\b(UNITY_BRANCH|UNITY_FLATTEN|UNITY_NO_SCREENSPACE_SHADOWS|UNITY_NO_LINEAR_COLORSPACE|UNITY_NO_RGBM|UNITY_NO_DXT5nm|UNITY_FRAMEBUFFER_FETCH_AVAILABLE|UNITY_USE_RGBA_FOR_POINT_SHADOWS|UNITY_ATTEN_CHANNEL|UNITY_HALF_TEXEL_OFFSET|UNITY_UV_STARTS_AT_TOP|UNITY_MIGHT_NOT_HAVE_DEPTH_Texture|UNITY_NEAR_CLIP_VALUE|UNITY_VPOS_TYPE|UNITY_CAN_COMPILE_TESSELLATION|UNITY_COMPILER_HLSL|UNITY_COMPILER_HLSL2GLSL|UNITY_COMPILER_CG|UNITY_REVERSED_Z)\\b"
                },
                {
                    "name": "support.variable.preprocessor.texture2D.shaderlab",
                    "match": "\\b(UNITY_PASS_FORWARDBASE|UNITY_PASS_FORWARDADD|UNITY_PASS_DEFERRED|UNITY_PASS_SHADOWCASTER|UNITY_PASS_PREPASSBASE|UNITY_PASS_PREPASSFINAL)\\b"
                },
                {
                    "name": "support.class.structures.shaderlab",
                    "match": "\\b(appdata_base|appdata_tan|appdata_full|appdata_img)\\b"
                },
                {
                    "name": "support.class.surface.shaderlab",
                    "match": "\\b(SurfaceOutputStandardSpecular|SurfaceOutputStandard|SurfaceOutput|Input)\\b"
                }
            ]
        }
    },
    "scopeName": "source.shader"
}