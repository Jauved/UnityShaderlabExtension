{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Shaderlab",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#tags"
        },
        {
            "include": "#variable"
        },
        {
            "include": "#numbers"
        },
        {
            "name": "meta.attribute.shaderlab",
            "begin": "(\\[)",
            "end": "(\\])",
            "patterns": [
                {
                    "name": "support.type.attributename.shaderlab",
                    "match": "\\G([a-zA-Z]+)\\b"
                },
                {
                    "include": "#numbers"
                }
            ]
        }
    ],
    "repository": {
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.shaderlab",
                    "match": "\\b([0-9]+\\.?[0-9]*)\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-dash.shaderlab",
                    "begin": "//",
                    "end": "$"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.other.shaderlab",
                    "match": "\\b(if|while|for|return|CGPROGRAM|CGINCLUDE|ENDCG|in|out|inout)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.basic.shaderlab",
                    "match": "\\b(Range|Float|Int|Color|Vector|2D|3D|Cube|Any)\\b"
                },
                {
                    "name": "storage.type.structure.shaderlab",
                    "match": "\\b(Shader|Properties|SubShader|Pass|Category)\\b"
                },
                {
                    "name": "support.type.propertyname.shaderlab",
                    "match": "\\b(Name|Tags|Fallback|CustomEditor|Cull|ZWrite|ZTest|Offset|Blend|BlendOp|ColorMask|AlphaToMask|LOD|Lighting|Stencil|Ref|ReadMask|WriteMask|Comp|CompBack|CompFront|Fail|ZFail|UsePass|GrabPass|Dependency|Material|Diffuse|Ambient|Shininess|Specular|Emission|Fog|Mode|Density|SeparateSpecular|SetTexture|Combine|ConstantColor|Matrix|AlphaTest|ColorMaterial|BindChannels|Bind)\\b"
                }
            ]
        },
        "tags": {
            "patterns": [
                {
                    "include": "#builtin-tags"
                },
                {
                    "include": "#builtin-tag-values"
                }
            ]
        },
        "strings":{
            "name":"string.shaderlab",
            "match": "(?<!\"\\s*=\\s*)\"[^\"=]*\"(?!\\s*=\\s*\")"
        },
        "builtin-tags": {
            "name": "support.type.propertyname.shaderlab",
            "match": "\"\\b(Queue|RenderType|DisableBatching|ForceNoShadowCasting|IgnoreProjector|CanUseSpriteAtlas|PreviewType|LightMode|PassFlags)\\b\""
        },
        "builtin-tag-values": {
            "patterns": [
                {
                    "include": "#builtin-tag-value-RenderTypes"
                }
            ]
        },
        "builtin-tag-value-RenderTypes": {
            "name": "support.type.property-name.shaderlab",
            "match": "\"\\b(Opaque|Transparent|TransparentCutout|Background|Overlay|TreeOpaque|TreeTransparentCutout|TreeBillboard|Grass|GrassBillboard)\\b\""
        },
        "variable": {
            "patterns": [
                {
                    "name": "support.variable.declaration.shaderlab",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
                },
                {
                    "name": "support.variable.reference.shaderlab",
                    "match": "\\[([a-zA-Z_][a-zA-Z0-9_]*)\\](?!\\s*[a-zA-Z_][a-zA-Z0-9_]*\\s*\\(\")"
                }
            ]
        }
    },
    "scopeName": "source.shader"
}